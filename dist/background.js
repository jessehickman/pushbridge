import{s as d,r as u,P as h,g as l,h as k,a as $,n as _,u as y,f as qe,b as Ve,c as E,d as ce,e as v,i as le,j as Ke,k as G,t as U,l as Ye,m as de,o as Qe,p as Je,q as Xe,v as Ze,w as et,x as tt,y as ot,z as nt}from"./notificationBadge.js";const at="modulepreload",rt=function(t){return"/"+t},J={},F=function(e,o,n){let a=Promise.resolve();if(o&&o.length>0){let i=function(w){return Promise.all(w.map(g=>Promise.resolve(g).then(m=>({status:"fulfilled",value:m}),m=>({status:"rejected",reason:m}))))};document.getElementsByTagName("link");const s=document.querySelector("meta[property=csp-nonce]"),c=s?.nonce||s?.getAttribute("nonce");a=i(o.map(w=>{if(w=rt(w),w in J)return;J[w]=!0;const g=w.endsWith(".css"),m=g?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${w}"]${m}`))return;const f=document.createElement("link");if(f.rel=g?"stylesheet":at,g||(f.as="script"),f.crossOrigin="",f.href=w,c&&f.setAttribute("nonce",c),document.head.appendChild(f),g)return new Promise((C,ze)=>{f.addEventListener("load",C),f.addEventListener("error",()=>ze(new Error(`Unable to preload CSS for ${w}`)))})}))}function r(s){const c=new Event("vite:preloadError",{cancelable:!0});if(c.payload=s,window.dispatchEvent(c),!c.defaultPrevented)throw s}return a.then(s=>{for(const c of s||[])c.status==="rejected"&&r(c.reason);return e().catch(r)})};let M=null,B=null,D=0,O=0;const st=6,ue=st*60*60*1e3;async function z(t=!1){try{const e=await l("pb_token");if(!e)throw new Error("No access token available");let o;t||(o=await l("pb_subscriptions_cursor"));const n=new URLSearchParams;o&&n.append("cursor",o);const a=o?`https://api.pushbullet.com/v2/subscriptions?${n}`:"https://api.pushbullet.com/v2/subscriptions",r=await k.fetch(a,{method:"GET",headers:{"Access-Token":e,"Content-Type":"application/json"}});if(!r.ok)throw r.status===401?(await u(h.TokenRevoked,{message:"Token revoked during channel fetch",code:r.status}),new Error("Token is invalid or revoked")):new Error(`Failed to fetch subscriptions: ${r.status} ${r.statusText}`);const s=await r.json();return s.cursor?(await d("pb_subscriptions_cursor",s.cursor),await d("pb_subscriptions_has_more",!0)):(await d("pb_subscriptions_cursor",null),await d("pb_subscriptions_has_more",!1)),await it(s.subscriptions),chrome.runtime.sendMessage({type:"pb:subsUpdated",payload:{subscriptions:s.subscriptions}}).catch(()=>{}),s.subscriptions}catch(e){throw console.error("Failed to fetch channel subscriptions:",e),await u(h.Unknown,{message:`Failed to fetch channel subscriptions: ${e instanceof Error?e.message:"Unknown error"}`}),e}}async function he(t=!1){try{const e=await l("pb_token");if(!e)throw new Error("No access token available");let o;t||(o=await l("pb_channels_cursor"));const n=new URLSearchParams;n.append("active_only","true"),o&&n.append("cursor",o);const a=o?`https://api.pushbullet.com/v2/channels?${n}`:"https://api.pushbullet.com/v2/channels?active_only=true",r=await k.fetch(a,{method:"GET",headers:{"Access-Token":e,"Content-Type":"application/json"}});if(!r.ok)throw r.status===401?(await u(h.TokenRevoked,{message:"Token revoked during owned channels fetch",code:r.status}),new Error("Token is invalid or revoked")):new Error(`Failed to fetch owned channels: ${r.status} ${r.statusText}`);const s=await r.json();return s.cursor?(await d("pb_channels_cursor",s.cursor),await d("pb_channels_has_more",!0)):(await d("pb_channels_cursor",null),await d("pb_channels_has_more",!1)),await ct(s.channels),chrome.runtime.sendMessage({type:"pb:ownedChannelsUpdated",payload:{channels:s.channels}}).catch(()=>{}),s.channels}catch(e){throw console.error("Failed to fetch owned channels:",e),await u(h.Unknown,{message:`Failed to fetch owned channels: ${e instanceof Error?e.message:"Unknown error"}`}),e}}async function fe(t=!1){const e=Date.now();return!t&&M&&e-D<ue?M:await z(t)}async function pe(t=!1){const e=Date.now();return!t&&B&&e-O<ue?B:await he(t)}async function it(t){M=t,D=Date.now(),await d("pb_channel_subs",{subscriptions:t,lastFetched:D})}async function ct(t){B=t,O=Date.now(),await d("pb_owned_channels",{channels:t,lastFetched:O})}async function q(){try{console.log("Refreshing channel data (subscriptions and owned channels)..."),await Promise.all([z(),he()]),console.log("Channel data refresh completed")}catch(t){throw console.error("Failed to refresh channel data:",t),await u(h.Unknown,{message:`Failed to refresh channel data: ${t instanceof Error?t.message:"Unknown error"}`}),t}}async function ge(){try{const t=await l("pb_channel_subs");if(t&&t.subscriptions)return M=t.subscriptions,D=t.lastFetched,t.subscriptions}catch(t){console.error("Failed to load cached subscriptions:",t)}return[]}async function we(){try{const t=await l("pb_owned_channels");if(t&&t.channels)return B=t.channels,O=t.lastFetched,t.channels}catch(t){console.error("Failed to load cached owned channels:",t)}return[]}async function lt(){M=null,D=0,await d("pb_channel_subs",null),await d("pb_subscriptions_cursor",null),await d("pb_subscriptions_has_more",null)}async function me(){try{await Promise.all([ge(),we()]),console.log("Channel manager initialized")}catch(t){console.error("Failed to initialize channel manager:",t)}}async function ke(t=50){try{const{getPushHistory:e}=await F(async()=>{const{getPushHistory:r}=await Promise.resolve().then(()=>St);return{getPushHistory:r}},void 0),[o,n]=await Promise.all([e(t*2),fe()]),a=new Set(n.filter(r=>r.channel&&r.channel.iden).map(r=>r.channel.iden));return o.pushes.filter(r=>r.channel_iden&&a.has(r.channel_iden)).sort((r,s)=>s.created-r.created).slice(0,t)}catch(e){throw console.error("Failed to get subscription posts:",e),await u(h.Unknown,{message:`Failed to get subscription posts: ${e instanceof Error?e.message:"Unknown error"}`}),e}}const A=Object.freeze(Object.defineProperty({__proto__:null,clearSubscriptionsCache:lt,fetchSubscriptions:z,getOwnedChannels:pe,getSubscriptionPosts:ke,getSubscriptions:fe,initializeChannelManager:me,loadCachedOwnedChannels:we,loadCachedSubscriptions:ge,refreshChannelData:q},Symbol.toStringTag,{value:"Module"})),dt=1440*60*1e3,b="mirror_";async function ut(t){try{if(console.log("üîî [MirrorManager] Handling mirror push:",{application_name:t.application_name,package_name:t.package_name,title:t.title}),t.application_name==="SMS"){await wt(t);return}const e=`${Date.now()}_${Math.random().toString(36).substr(2,9)}`,o={package_name:t.package_name,notification_id:t.notification_id,notification_tag:t.notification_tag,source_device_iden:t.source_device_iden,title:t.title,body:t.body,application_name:t.application_name,icon_url:t.icon_url,expiresAt:Date.now()+dt};await d(`${b}${e}`,o);const n={type:"basic",title:t.title,message:t.body,iconUrl:t.icon_url?t.icon_url:"icons/48.png",requireInteraction:!0,silent:!1};await chrome.notifications.create(e,n),console.log("üîî [MirrorManager] Adding mirror notification to badge"),await _.addPushNotifications(1),await y.markAsProcessed("mirror",t.notification_id,Date.now()),console.log("Chrome notification created:",e,"for app:",t.package_name)}catch(e){console.error("Failed to handle mirror push:",e),await u(h.Unknown,{message:"Failed to create notification from phone",code:e instanceof Error?void 0:500})}}async function ht(t){try{console.log("üóëÔ∏è [MirrorManager] Handling remote dismissal:",{package_name:t.package_name,notification_id:t.notification_id});const e=await ft(t);for(const[o]of e)await chrome.notifications.clear(o),await $(`${b}${o}`),console.log("üóëÔ∏è [MirrorManager] Removing mirror notification from badge"),await _.addPushNotifications(-1),console.log("Chrome notification cleared:",o,"for app:",t.package_name)}catch(e){console.error("Failed to handle remote dismissal:",e),await u(h.Unknown,{message:"Failed to clear notification from phone",code:e instanceof Error?void 0:500})}}async function ye(t){try{console.log("üë§ [MirrorManager] Handling user dismissal for:",t);const e=await l(`${b}${t}`);if(!e){console.log("No metadata found for notification:",t),await chrome.notifications.clear(t);return}const o=await l("pb_user_iden");if(!o){console.error("No user ID found for dismissal");return}await pt(e,o),await $(`${b}${t}`),console.log("üë§ [MirrorManager] Removing mirror notification from badge (user dismissal)"),await _.addPushNotifications(-1),console.log("User dismissal sent to phone for:",t)}catch(e){console.error("Failed to handle user dismissal:",e),await u(h.Unknown,{message:"Failed to dismiss notification on phone",code:e instanceof Error?void 0:500})}}async function ft(t){const e=[];try{const o=await chrome.storage.local.get(null);for(const[n,a]of Object.entries(o))if(n.startsWith(b)){const r=a;if(r.package_name===t.package_name&&r.notification_id===t.notification_id&&r.notification_tag===t.notification_tag){const s=n.replace(b,"");e.push([s,r])}}}catch(o){console.error("Failed to find matching mirrors:",o)}return e}async function pt(t,e){try{const o=await l("pb_token");if(!o)throw new Error("No token available");const n={type:"push",push:{type:"dismissal",package_name:t.package_name,notification_id:t.notification_id,notification_tag:t.notification_tag,source_user_iden:e}},a=await k.fetch("https://api.pushbullet.com/v2/ephemerals",{method:"POST",headers:{"Content-Type":"application/json","Access-Token":o},body:JSON.stringify(n)});if(!a.ok)throw new Error(`Dismissal API error: ${a.status} ${a.statusText}`);console.log("Dismissal ephemeral sent successfully")}catch(o){throw console.error("Failed to send dismissal ephemeral:",o),o}}async function _e(){try{const t=await chrome.storage.local.get(null),e=Date.now();for(const[o,n]of Object.entries(t))if(o.startsWith(b)){const a=n;if(a.expiresAt<e){await $(o);continue}const r=o.replace(b,""),s={type:"basic",title:a.title,message:a.body,iconUrl:a.icon_url?a.icon_url:"icons/48.png",requireInteraction:!0,silent:!1};await chrome.notifications.create(r,s),console.log("Reconstructed notification:",r)}}catch(t){console.error("Failed to reconstruct mirrors:",t)}}async function be(){try{console.log("üßπ [MirrorManager] Cleaning up expired mirrors");const t=await chrome.storage.local.get(null),e=Date.now();let o=0;for(const[n,a]of Object.entries(t))n.startsWith(b)&&a.expiresAt<e&&(await $(n),o++,console.log("Cleaned up expired mirror:",n));o>0&&(console.log(`üßπ [MirrorManager] Removed ${o} expired mirrors from badge`),await _.addPushNotifications(-o))}catch(t){console.error("Failed to cleanup expired mirrors:",t)}}async function gt(){const t=[];try{const e=await chrome.storage.local.get(null),o=Date.now();for(const[n,a]of Object.entries(e))if(n.startsWith(b)){const r=a;if(r.expiresAt<o)continue;const s=n.replace(b,"");t.push({id:s,meta:r})}}catch(e){console.error("Failed to get active mirrors:",e)}return t}async function wt(t){try{if(t.application_name!=="SMS")return;const e=t.conversation_iden||`${t.package_name}:${t.address}`||t.notification_id,o=t.timestamp,n=o?qe(o):Date.now();if(console.log("üì± [MirrorManager] Processing SMS with timestamp conversion:",{rawTimestamp:o,rawTimestampISO:o?new Date(o*1e3).toISOString():"none",convertedTimestamp:n,convertedTimestampISO:new Date(n).toISOString(),conversationId:e}),!await y.shouldShowNotification({id:t.notification_id||`sms_${Date.now()}`,type:"sms",created:n,metadata:{conversationId:e,packageName:t.package_name,applicationName:t.application_name}})){console.log(`‚è≠Ô∏è [MirrorManager] Skipping SMS notification (too old): ${e}`);return}const r=`sms_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;console.log("üì± [MirrorManager] Creating Chrome notification for SMS:",{title:t.title,body:t.body,chromeNotifId:r}),await chrome.notifications.create(r,{type:"basic",title:t.title,message:t.body,iconUrl:t.icon_url?t.icon_url:"icons/48.png",requireInteraction:!1,silent:!1});const s={id:t.notification_id||`incoming_${Date.now()}`,pb_guid:t.pb_guid||`incoming_${Date.now()}_${Math.random()}`,timestamp:n,inbound:!0,text:t.body||"",image_url:t.image_url,conversation_iden:e};await Ve(e,s,e),await y.markAsProcessed("sms",s.id,n),console.log("‚úÖ [MirrorManager] Incoming SMS processed:",e,"Chrome notif:",r)}catch(e){console.error("Failed to handle incoming SMS:",e),await u(h.Unknown,{message:"Failed to handle incoming SMS",code:e instanceof Error?void 0:500})}}const mt=300*1e3;async function I(t=!1){try{if(!t){const n=await l("pb_contact_cache");if(n&&Date.now()-n.lastFetched<mt)return console.log("Using cached contact list"),n.contacts}const e=await kt(t),o={contacts:e,lastFetched:Date.now(),cursor:await l("pb_contacts_cursor"),hasMore:await l("pb_contacts_has_more")||!1};return await d("pb_contact_cache",o),console.log("Contact list cached with",e.length,"contacts"),e}catch(e){console.error("Failed to get contacts:",e);const o=await l("pb_contact_cache");if(o)return console.log("Returning expired cache due to fetch error"),o.contacts;throw e}}async function kt(t=!1){const e=await l("pb_token");if(!e)throw new Error("No token available");let o;t||(o=await l("pb_contacts_cursor"));const n=new URLSearchParams;o&&n.append("cursor",o);const a=o?`https://api.pushbullet.com/v2/chats?${n}`:"https://api.pushbullet.com/v2/chats",r=await k.fetch(a,{method:"GET",headers:{"Access-Token":e,"Content-Type":"application/json"}});if(!r.ok)throw r.status===401?(await u(h.TokenRevoked,{message:"Token revoked while fetching contacts",code:r.status}),new Error("Token is invalid or revoked")):new Error(`Failed to fetch contacts: ${r.status} ${r.statusText}`);const s=await r.json();s.cursor?(await d("pb_contacts_cursor",s.cursor),await d("pb_contacts_has_more",!0)):(await d("pb_contacts_cursor",null),await d("pb_contacts_has_more",!1));const c=[];if(s.chats&&Array.isArray(s.chats)){for(const i of s.chats)if(i.active&&i.with&&i.with.type==="user"){const w={iden:i.with.iden,name:i.with.name,email:i.with.email,email_normalized:i.with.email_normalized,image_url:i.with.image_url,active:i.active,created:i.created,modified:i.modified};c.push(w)}}return console.log(`Fetched ${c.length} contacts from API`),c}async function yt(){try{await d("pb_contact_cache",null),await d("pb_contacts_cursor",null),await d("pb_contacts_has_more",null),console.log("Contact cache cleared")}catch(t){throw console.error("Failed to clear contact cache:",t),t}}async function _t(t){return(await I()).find(o=>o.iden===t)||null}const W="user_context",N="context_refresh_triggers";class T{constructor(){this.context=null,this.isRefreshing=!1,this.refreshPromise=null}static getInstance(){return T.instance||(T.instance=new T),T.instance}async getContext(e){if(e.type==="popup_open"?await this.refreshContext(e):(!this.context||!this.context.is_valid)&&await this.refreshContext(e),!this.context)throw new Error("Failed to load user context");return this.context}async isKnownSource(e,o){if(!this.context)return!1;if(e&&this.context.devices.has(e))return!0;if(o){for(const n of this.context.subscriptions.values())if(n.channel.iden===o)return!0}return!!(o&&this.context.owned_channels.has(o))}async handleUnknownSource(e,o){const n={type:"unknown_source",timestamp:Date.now(),reason:`Unknown source: device=${e}, channel=${o}`};await this.refreshContext(n)}async refreshContext(e){if(this.isRefreshing&&this.refreshPromise){await this.refreshPromise;return}this.isRefreshing=!0,this.refreshPromise=this.performRefresh(e);try{await this.refreshPromise}finally{this.isRefreshing=!1,this.refreshPromise=null}}async performRefresh(e){try{const o=await l("pb_token");if(!o)throw new Error("No token available");const n=await l("pb_device_iden");if(!n)throw new Error("Current device not registered");const[a,r,s,c]=await Promise.all([this.fetchSubscriptions(o),this.fetchChannels(o),this.fetchDevices(o),this.fetchContacts(o)]),i=new Map,w=new Map,g=new Map,m=new Map;r.channels&&Array.isArray(r.channels)&&r.channels.forEach(f=>{f&&f.iden?i.set(f.iden,f):console.warn("Skipping channel with missing iden:",f)}),a.subscriptions&&Array.isArray(a.subscriptions)&&a.subscriptions.forEach(f=>{f.channel&&f.channel.iden?w.set(f.channel.iden,f):console.warn("Skipping subscription with missing channel data:",f)}),s.devices&&Array.isArray(s.devices)&&s.devices.forEach(f=>{f&&f.iden?g.set(f.iden,f):console.warn("Skipping device with missing iden:",f)}),c&&Array.isArray(c)&&c.forEach(f=>{f&&f.iden?m.set(f.iden,f):console.warn("Skipping contact with missing iden:",f)}),this.context={current_device_iden:n,owned_channels:i,subscriptions:w,devices:g,contacts:m,last_refreshed:Date.now(),is_valid:!0},await this.saveContext(),await this.saveRefreshTrigger(e),console.log("Context refreshed successfully",{ownedChannels:i.size,subscriptions:w.size,devices:g.size,contacts:m.size,trigger:e.type})}catch(o){throw console.error("Failed to refresh context:",o),this.context&&(this.context.is_valid=!1,await this.saveContext()),await u(h.Unknown,{message:"Failed to refresh user context",code:o instanceof Error?void 0:500}),o}}async fetchSubscriptions(e){const o=await k.fetch("https://api.pushbullet.com/v2/subscriptions",{method:"GET",headers:{"Access-Token":e,"Content-Type":"application/json"}});if(!o.ok)throw o.status===401?(await u(h.TokenRevoked,{message:"Token revoked while fetching subscriptions",code:o.status}),new Error("Token is invalid or revoked")):new Error(`Failed to fetch subscriptions: ${o.status} ${o.statusText}`);const n=await o.json();if(!n||typeof n!="object")throw new Error("Invalid response format from subscriptions API");return(!n.subscriptions||!Array.isArray(n.subscriptions))&&(console.warn("Subscriptions API returned unexpected format, using empty array"),n.subscriptions=[]),n}async fetchChannels(e){const o=await k.fetch("https://api.pushbullet.com/v2/channels?limit=500&active_only=true",{method:"GET",headers:{"Access-Token":e,"Content-Type":"application/json"}});if(!o.ok)throw o.status===401?(await u(h.TokenRevoked,{message:"Token revoked while fetching channels",code:o.status}),new Error("Token is invalid or revoked")):new Error(`Failed to fetch channels: ${o.status} ${o.statusText}`);const n=await o.json();if(!n||typeof n!="object")throw new Error("Invalid response format from channels API");return(!n.channels||!Array.isArray(n.channels))&&(console.warn("Channels API returned unexpected format, using empty array"),n.channels=[]),n}async fetchDevices(e){const o=await k.fetch("https://api.pushbullet.com/v2/devices",{method:"GET",headers:{"Access-Token":e,"Content-Type":"application/json"}});if(!o.ok)throw o.status===401?(await u(h.TokenRevoked,{message:"Token revoked while fetching devices",code:o.status}),new Error("Token is invalid or revoked")):new Error(`Failed to fetch devices: ${o.status} ${o.statusText}`);const n=await o.json();if(!n||typeof n!="object")throw new Error("Invalid response format from devices API");return(!n.devices||!Array.isArray(n.devices))&&(console.warn("Devices API returned unexpected format, using empty array"),n.devices=[]),n}async fetchContacts(e){const o=await k.fetch("https://api.pushbullet.com/v2/chats",{method:"GET",headers:{"Access-Token":e,"Content-Type":"application/json"}});if(!o.ok)throw o.status===401?(await u(h.TokenRevoked,{message:"Token revoked while fetching contacts",code:o.status}),new Error("Token is invalid or revoked")):new Error(`Failed to fetch contacts: ${o.status} ${o.statusText}`);const n=await o.json(),a=[];if(n.chats&&Array.isArray(n.chats)){for(const r of n.chats)if(r.active&&r.with&&r.with.type==="user"){const s={iden:r.with.iden,name:r.with.name,email:r.with.email,email_normalized:r.with.email_normalized,image_url:r.with.image_url,active:r.active,created:r.created,modified:r.modified};a.push(s)}}return a}async saveContext(){if(this.context){const e={...this.context,owned_channels:Array.from(this.context.owned_channels.entries()),subscriptions:Array.from(this.context.subscriptions.entries()),devices:Array.from(this.context.devices.entries())};await d(W,e)}}async loadContext(){try{const e=await l(W);e&&(this.context={...e,owned_channels:new Map(e.owned_channels||[]),subscriptions:new Map(e.subscriptions||[]),devices:new Map(e.devices||[])})}catch(e){console.error("Failed to load context from storage:",e),this.context=null}}async saveRefreshTrigger(e){try{const o=await l(N),n=Array.isArray(o)?o:[];n.push(e),n.length>10&&n.splice(0,n.length-10),await d(N,n)}catch(o){console.error("Failed to save refresh trigger:",o)}}async getRefreshTriggers(){return await l(N)||[]}async clearContext(){this.context=null,await d(W,null),await d(N,null)}async removeChannelFromContext(e){!this.context||!this.context.subscriptions||(this.context.subscriptions.delete(e),await this.saveContext(),console.log(`Removed channel ${e} from user context`))}}const P=T.getInstance(),bt=Object.freeze(Object.defineProperty({__proto__:null,ContextManager:T,contextManager:P},Symbol.toStringTag,{value:"Module"}));class vt{static enrichPush(e,o){const n=this.computeMetadata(e,o);return{...e,metadata:n}}static enrichPushes(e,o){return e.map(n=>this.enrichPush(n,o))}static computeMetadata(e,o){const n=this.determineSourceType(e,o),a=this.determineOwnership(e,o),r=this.determineFileInfo(e),s=this.computeDisplaySource(e,o,n),c=this.computeOwnershipReason(e,o,a,n);return{source_type:n,source_channel_tag:this.getChannelTag(e,o),source_channel_name:this.getChannelName(e,o),source_device_nickname:this.getDeviceNickname(e,o),is_owned_by_user:a,can_delete:a,can_dismiss:!0,has_file:r,file_metadata:r?this.getFileMetadata(e):void 0,display_source:s,ownership_reason:c}}static determineSourceType(e,o){return e.channel_iden?o.owned_channels.has(e.channel_iden)?"channel_broadcast":(o.subscriptions.has(e.channel_iden),"channel_subscription"):"device"}static determineOwnership(e,o){return!!(e.source_device_iden===o.current_device_iden||e.channel_iden&&o.owned_channels.has(e.channel_iden))}static determineFileInfo(e){return!!(e.file_name||e.file_url||e.image_url)}static getFileMetadata(e){if(this.determineFileInfo(e))return{name:e.file_name||"Unknown file",type:e.file_type||"unknown",url:e.file_url||e.image_url}}static getChannelTag(e,o){if(!e.channel_iden)return;const n=o.owned_channels.get(e.channel_iden);if(n)return n.tag;const a=o.subscriptions.get(e.channel_iden);if(a)return a.channel.tag}static getChannelName(e,o){if(!e.channel_iden)return;const n=o.owned_channels.get(e.channel_iden);if(n)return n.name;const a=o.subscriptions.get(e.channel_iden);if(a)return a.channel.name}static getDeviceNickname(e,o){return e.source_device_iden?o.devices.get(e.source_device_iden)?.nickname:void 0}static computeDisplaySource(e,o,n){switch(n){case"device":{const a=this.getDeviceNickname(e,o);return e.source_device_iden===o.current_device_iden?"Your device":a||"Unknown device"}case"channel_broadcast":return`Channel: ${this.getChannelName(e,o)||"Unknown channel"}`;case"channel_subscription":return`Channel: ${this.getChannelName(e,o)||"Unknown channel"}`;default:return"Unknown source"}}static computeOwnershipReason(e,o,n,a){if(!n)return"You received this";switch(a){case"device":return e.source_device_iden===o.current_device_iden?"You sent this":"From your device";case"channel_broadcast":return`You own channel: ${this.getChannelName(e,o)||"Unknown channel"}`;case"channel_subscription":return"You received this from a channel";default:return"You own this"}}static async checkAndHandleUnknownSource(e){await P.isKnownSource(e.source_device_iden,e.channel_iden)||await P.handleUnknownSource(e.source_device_iden,e.channel_iden)}static async enrichPushesWithContextRefresh(e,o){for(const a of e)await this.checkAndHandleUnknownSource(a);const n=await P.getContext(o);return this.enrichPushes(e,n)}}async function x(t){try{if(!t.type||!["note","link","broadcast"].includes(t.type))throw new Error('Invalid push type. Must be "note", "link", or "broadcast"');if(t.type==="link"&&!t.url)throw new Error("URL is required for link pushes");if(t.type==="broadcast"&&!t.channel_tag)throw new Error("Channel tag is required for broadcast pushes");const e=await l("pb_token");if(!e)throw new Error("No token available");const o=await l("pb_device_iden");if(!o)throw new Error("Chrome device not registered");const n={type:t.type==="broadcast"?"note":t.type,source_device_iden:o};t.title&&(n.title=t.title),t.body&&(n.body=t.body),t.type==="link"&&(n.url=t.url),t.type==="broadcast"?n.channel_tag=t.channel_tag:t.targetDeviceIden?n.target_device_iden=t.targetDeviceIden:t.email&&(n.email=t.email);const a=await k.fetch("https://api.pushbullet.com/v2/pushes",{method:"POST",headers:{"Access-Token":e,"Content-Type":"application/json"},body:JSON.stringify(n)});if(!a.ok){if(a.status===401)throw await u(h.TokenRevoked,{message:"Token revoked while creating push",code:a.status}),new Error("Token is invalid or revoked");if(a.status===400){const s=await a.json();throw new Error(`Invalid push data: ${s.error?.message||"Bad request"}`)}throw new Error(`Failed to create push: ${a.status} ${a.statusText}`)}return await a.json()}catch(e){throw await u(h.Unknown,{message:"Failed to create push",code:e instanceof Error?void 0:500}),e}}async function V(t){try{if(t.size>26214400)throw new Error(`File size (${(t.size/1024/1024).toFixed(1)}MB) exceeds the 25MB limit`);const o=await l("pb_token");if(!o)throw new Error("No token available");const n={file_name:t.name,file_type:t.type||"application/octet-stream"},a=await k.fetch("https://api.pushbullet.com/v2/upload-request",{method:"POST",headers:{"Access-Token":o,"Content-Type":"application/json"},body:JSON.stringify(n)});if(!a.ok){if(a.status===401)throw await u(h.TokenRevoked,{message:"Token revoked while requesting upload",code:a.status}),new Error("Token is invalid or revoked");if(a.status===413)throw new Error("File too large for upload");if(a.status===400){const c=await a.json();throw new Error(`Invalid upload request: ${c.error?.message||"Bad request"}`)}throw new Error(`Failed to request upload: ${a.status} ${a.statusText}`)}const r=await a.json(),s={uploadUrl:r.upload_url,fileUrl:r.file_url,s3Fields:r.data};return console.log("Upload request successful:",s.fileUrl),s}catch(e){throw console.error("Failed to request upload:",e),await u(h.Unknown,{message:"Failed to request file upload",code:e instanceof Error?void 0:500}),e}}async function ve(t,e,o,n,a,r,s,c){try{const i=await l("pb_token");if(!i)throw new Error("No token available");const w=await l("pb_device_iden");if(!w)throw new Error("Chrome device not registered");const g={type:"file",file_name:e,file_type:o,file_url:t,source_device_iden:w};n&&(g.target_device_iden=n),c&&(g.email=c),a&&(g.title=a),r&&(g.body=r+" (File: "+e+")"),s&&(g.channel_tag=s);const m=await k.fetch("https://api.pushbullet.com/v2/pushes",{method:"POST",headers:{"Access-Token":i,"Content-Type":"application/json"},body:JSON.stringify(g)});if(!m.ok){if(m.status===401)throw await u(h.TokenRevoked,{message:"Token revoked while creating file push",code:m.status}),new Error("Token is invalid or revoked");if(m.status===400){const C=await m.json();throw new Error(`Invalid file push data: ${C.error?.message||"Bad request"}`)}throw new Error(`Failed to create file push: ${m.status} ${m.statusText}`)}const f=await m.json();return console.log("File push created successfully:",f.iden),f}catch(i){throw console.error("Failed to create file push:",i),await u(h.Unknown,{message:"Failed to create file push",code:i instanceof Error?void 0:500}),i}}async function L(t=200,e,o){try{const n=await l("pb_token");if(!n)throw new Error("No token available");const a=new URLSearchParams;a.append("limit",t.toString()),e&&a.append("modified_after",e.toString()),o&&a.append("cursor",o);const r=await k.fetch(`https://api.pushbullet.com/v2/pushes?${a}`,{method:"GET",headers:{"Access-Token":n,"Content-Type":"application/json"}});if(!r.ok)throw r.status===401?(await u(h.TokenRevoked,{message:"Token revoked while fetching push history",code:r.status}),new Error("Token is invalid or revoked")):new Error(`Failed to fetch push history: ${r.status} ${r.statusText}`);const s=await r.json();return{pushes:s.pushes,cursor:s.cursor}}catch(n){throw await u(h.Unknown,{message:"Failed to fetch push history",code:n instanceof Error?void 0:500}),n}}async function K(t,e=200,o,n){try{const a=await l("pb_token");if(!a)throw new Error("No token available");const r=new URLSearchParams;r.append("limit",e.toString()),o&&r.append("modified_after",o.toString()),n&&r.append("cursor",n);const s=await k.fetch(`https://api.pushbullet.com/v2/pushes?${r}`,{method:"GET",headers:{"Access-Token":a,"Content-Type":"application/json"}});if(!s.ok)throw s.status===401?(await u(h.TokenRevoked,{message:"Token revoked while fetching push history",code:s.status}),new Error("Token is invalid or revoked")):new Error(`Failed to fetch push history: ${s.status} ${s.statusText}`);const c=await s.json();return{pushes:await vt.enrichPushesWithContextRefresh(c.pushes,t),cursor:c.cursor}}catch(a){throw await u(h.Unknown,{message:"Failed to fetch enhanced push history",code:a instanceof Error?void 0:500}),a}}async function Y(t){const e=await l("pb_token");if(!e)throw new Error("No token available");const o=await k.fetch(`https://api.pushbullet.com/v2/pushes/${t}`,{method:"POST",headers:{"Access-Token":e,"Content-Type":"application/json"},body:JSON.stringify({dismissed:!0})});if(!o.ok)throw o.status===401?(await u(h.TokenRevoked,{message:"Token revoked while dismissing push",code:o.status}),new Error("Token is invalid or revoked")):new Error(`Failed to dismiss push: ${o.status} ${o.statusText}`)}async function Se(t){const e=await l("pb_token");if(!e)throw new Error("No token available");const o=await k.fetch(`https://api.pushbullet.com/v2/pushes/${t}`,{method:"DELETE",headers:{"Access-Token":e,"Content-Type":"application/json"}});if(!o.ok)throw o.status===401?(await u(h.TokenRevoked,{message:"Token revoked while deleting push",code:o.status}),new Error("Token is invalid or revoked")):new Error(`Failed to delete push: ${o.status} ${o.statusText}`)}const St=Object.freeze(Object.defineProperty({__proto__:null,createFilePush:ve,createPush:x,deletePush:Se,dismissPush:Y,getEnhancedPushHistory:K,getPushHistory:L,requestUpload:V},Symbol.toStringTag,{value:"Module"})),p={socket:null,isConnected:!1,lastHeartbeat:0,retryCount:0,reconnectTimer:null,isPolling:!1,pollInterval:null},Te=10,X=[2e3,4e3,8e3,16e3,32e3],Tt=6e4,Et=6e4;async function Q(){try{if(!await l("pb_token")){console.log("No token available, skipping WebSocket initialization");return}await Ee()}catch(t){console.error("Failed to initialize WebSocket:",t),await u(h.Unknown,{message:"Failed to initialize WebSocket connection",code:t instanceof Error?void 0:500})}}async function Ee(){try{const t=await l("pb_token");if(!t)throw new Error("No token available");p.socket&&p.socket.close(),p.reconnectTimer&&(clearTimeout(p.reconnectTimer),p.reconnectTimer=null),p.pollInterval&&(clearInterval(p.pollInterval),p.pollInterval=null);const e=`wss://stream.pushbullet.com/websocket/${t}`;console.log("Connecting to WebSocket:",e),p.socket=new WebSocket(e),p.socket.onopen=Ft,p.socket.onmessage=Ct,p.socket.onclose=Pt,p.socket.onerror=Mt}catch(t){console.log("Failed to connect WebSocket:",t),await Fe()}}function Ft(){console.log("WebSocket connected"),p.isConnected=!0,p.lastHeartbeat=Date.now(),p.retryCount=0,p.isPolling=!1,p.pollInterval&&(clearInterval(p.pollInterval),p.pollInterval=null)}function Ct(t){try{const e=JSON.parse(t.data);switch(console.log("WebSocket message received:",e.type),p.lastHeartbeat=Date.now(),e.type){case"nop":console.log("WebSocket heartbeat received");break;case"tickle":e.subtype==="push"?(console.log("Push tickle received, syncing history"),Ce()):e.subtype==="device"?(console.log("Device tickle received, syncing history"),At()):e.subtype==="contact"&&(console.log("Contact tickle received, syncing contacts"),$t());break;case"push":console.log("Push message received:",e.push?.type),It(e);break;default:console.log("Unknown WebSocket message type:",e.type)}}catch(e){console.error("Failed to parse WebSocket message:",e)}}async function Pt(t){console.log("WebSocket closed:",t.code,t.reason),p.isConnected=!1,p.socket=null,p.retryCount<Te?await Fe():(console.log("Max retry count reached, switching to polling mode"),await Dt())}function Mt(t){console.log("WebSocket connection error:",t),p.isConnected=!1}async function Fe(){p.retryCount++;const t=X[Math.min(p.retryCount-1,X.length-1)];console.log(`WebSocket connection failed, retry ${p.retryCount}/${Te} in ${t}ms`),p.reconnectTimer=setTimeout(()=>{Ee()},t)}async function Dt(){p.isPolling||(console.log("Switching to polling mode due to WebSocket connection failures"),p.isPolling=!0,await u(h.Unknown,{message:"Real-time connection lost; falling back to polling.",code:1001}),p.pollInterval=setInterval(()=>{Ce()},Et))}async function Ce(){try{console.log("üîÑ [WebSocket] Push tickle received, syncing history with unified tracker");const t=await L(50,0,"");if(t.pushes&&t.pushes.length>0){console.log(`üîÑ [WebSocket] Found ${t.pushes.length} pushes to process`);let e=0,o=0;for(const n of t.pushes)!n.dismissed&&(n.receiver_iden||n.target_device_iden||n.type==="mirror"||n.type==="file"||n.type==="link"||n.channel_iden)&&(console.log(`üîî [WebSocket] Processing push: ${n.iden} (type: ${n.type}, created: ${n.created})`),await y.shouldShowNotification({id:n.iden,type:"push",created:n.created,metadata:{pushIden:n.iden}})?(console.log(`üÜï [WebSocket] New push detected: ${n.iden} (timestamp: ${n.created})`),n.type==="link"&&(console.log("üîó [WebSocket] Processing link push from history"),await Pe(n)),await _.addPushNotifications(1),await y.markAsProcessed("push",n.iden,new Date(E(n.created)*1e3).getTime()),o++):console.log(`‚è≠Ô∏è [WebSocket] Skipping already processed push: ${n.iden}`),e++);console.log(`üîÑ [WebSocket] Processed ${e} pushes, ${o} new pushes from tickle`)}}catch(t){console.error("Failed to handle push tickle:",t)}}async function At(){try{console.log("üîÑ [WebSocket] Device tickle received, refreshing devices directly"),await ce(!0),console.log("üîÑ [WebSocket] Devices refreshed successfully")}catch(t){console.error("Failed to handle device tickle:",t)}}async function $t(){try{console.log("üîÑ [WebSocket] Contact tickle received, refreshing contacts directly"),await I(!0),console.log("üîÑ [WebSocket] Contacts refreshed successfully")}catch(t){console.error("Failed to handle contact tickle:",t)}}async function It(t){try{const e=t.push;if(!e||!e.type){console.log("Invalid push message format");return}switch(e.type){case"mirror":console.log("Mirror push received, creating Chrome notification"),await ut(e);break;case"dismissal":console.log("Dismissal push received, clearing Chrome notification"),await ht(e);break;case"sms_changed":console.log("SMS changed push received, triggering SMS sync"),await Nt(e);break;case"link":console.log("Link push received, opening in new tab"),await Pe(e);break;default:console.log("Unhandled push type:",e.type)}}catch(e){console.error("Failed to handle push message:",e),await u(h.Unknown,{message:"Failed to process push message",code:e instanceof Error?void 0:500})}}async function Nt(t){try{console.log("üì± [WebSocket] SMS changed detected, triggering simple sync"),console.log("üì± [WebSocket] SMS changed push:",t);const e=await v();if(!e){console.warn("‚ö†Ô∏è [WebSocket] No SMS device for sync");return}await le(e.iden)}catch(e){console.error("üì± [WebSocket] Failed to handle SMS changed:",e)}}async function Pe(t){try{if(console.log("üîó [WebSocket] Link push received:",t),!(await l("pb_settings"))?.autoOpenPushLinksAsTab){console.log("üîó [WebSocket] Auto-open links disabled, skipping tab creation");return}const o=t.url;if(!o){console.warn("‚ö†Ô∏è [WebSocket] Link push missing URL");return}try{new URL(o)}catch(n){console.warn("‚ö†Ô∏è [WebSocket] Invalid URL format:",o,n);return}console.log(`üîó [WebSocket] Opening URL in new tab: ${o}`),await chrome.tabs.create({url:o,active:!1}),console.log("‚úÖ [WebSocket] Successfully opened link in new tab")}catch(e){console.error("üîó [WebSocket] Failed to handle link push:",e),await u(h.Unknown,{message:"Failed to open link in new tab",code:e instanceof Error?void 0:500})}}function Me(){return!p.isConnected||!p.socket?!1:Date.now()-p.lastHeartbeat<Tt}function De(){return{isConnected:p.isConnected,isPolling:p.isPolling,retryCount:p.retryCount,lastHeartbeat:p.lastHeartbeat}}const Ae="keepalive",$e="channel-refresh",Z=5,ee=6;async function Ut(){try{await chrome.alarms.create(Ae,{periodInMinutes:Z}),console.log(`Keep-alive alarm created with ${Z} minute interval`),await chrome.alarms.create($e,{periodInMinutes:ee*60}),console.log(`Channel refresh alarm created with ${ee} hour interval`),chrome.alarms.onAlarm.addListener(Bt)}catch(t){console.error("Failed to initialize alarms:",t)}}function Bt(t){t.name===Ae?Ot():t.name===$e&&xt()}async function Ot(){console.log("keepalive - checking system health");try{const t=De(),e=Me();console.log("WebSocket status:",t),!e&&t.lastHeartbeat>0&&Date.now()-t.lastHeartbeat>6e4&&(console.log("WebSocket heartbeat stale, attempting reconnection"),await Q()),await be(),console.log("üîÑ [Alarm] Refreshing notification badge"),await _.refreshBadge(),t.retryCount>0&&console.log(`WebSocket reconnection attempts: ${t.retryCount}`)}catch(t){console.log("Keep-alive check failed:",t)}}async function xt(){console.log("channel-refresh - refreshing channel data");try{await q(),console.log("Channel data refreshed successfully")}catch(t){console.error("Channel refresh failed:",t),await u(h.Unknown,{message:"Channel data refresh failed",code:t instanceof Error?void 0:500})}}async function Lt(t){try{let e;t.arrayBuffer&&typeof t.arrayBuffer=="function"?e=await t.arrayBuffer():e=await new Promise((a,r)=>{const s=new FileReader;s.onload=()=>a(s.result),s.onerror=()=>r(s.error),s.readAsArrayBuffer(t)});const o=await crypto.subtle.digest("SHA-256",e);return Array.from(new Uint8Array(o)).map(a=>a.toString(16).padStart(2,"0")).join("")}catch(e){return console.error("Failed to generate file hash:",e),`${Date.now()}-${t.size}-${t.name}`}}async function Ie(t,e,o,n=0){const a={fileHash:t,uploadInfo:e,offset:n,fileName:o.name,fileSize:o.size,fileType:o.type||"application/octet-stream",timestamp:Date.now(),attempts:0},r=await l("pb_pending_uploads")||[],s=r.findIndex(c=>c.fileHash===t);s>=0?r[s]=a:r.push(a),await d("pb_pending_uploads",r)}async function Ne(t){const o=(await l("pb_pending_uploads")||[]).filter(n=>n.fileHash!==t);await d("pb_pending_uploads",o)}async function Ue(t,e,o,n=0){const a=await Lt(e);try{await Ie(a,t,e,n);const r=new FormData;if(Object.entries(t.s3Fields).forEach(([c,i])=>{r.append(c,i)}),n>0){const c=e.slice(n);r.append("file",c,e.name)}else r.append("file",e);const s=await fetch(t.uploadUrl,{method:"POST",body:r});if(s.ok)return console.log("File upload completed successfully"),await Ne(a),o&&o({loaded:e.size,total:e.size,percentage:100}),{success:!0};{const c=`Upload failed with status ${s.status}: ${s.statusText}`;return console.error(c),s.status===413?(await u(h.FileTooLarge,{message:"File too large for upload",code:413}),{success:!1,error:"File too large for upload"}):s.status===400?(await u(h.InvalidUpload,{message:"Invalid upload request",code:400}),{success:!1,error:"Invalid upload request"}):(await u(h.Unknown,{message:"File upload failed",code:s.status}),{success:!1,error:"Upload failed"})}}catch(r){return console.error("Failed to upload file:",r),r instanceof TypeError&&r.message.includes("fetch")?(await u(h.NetworkError,{message:"Network error during file upload",code:void 0}),{success:!1,error:"Network error during upload"}):(await u(h.Unknown,{message:"Failed to upload file",code:r instanceof Error?void 0:500}),{success:!1,error:"Upload failed"})}}async function Ht(){try{const t=await l("pb_pending_uploads")||[];let e=0;for(const o of t){if(Date.now()-o.timestamp>3600*1e3){console.log("Skipping old pending upload:",o.fileName);continue}if(o.attempts>=3){console.log("Skipping upload with too many attempts:",o.fileName);continue}try{console.log(`Resuming upload for ${o.fileName} from offset ${o.offset}`),await Ne(o.fileHash),e++}catch(n){console.error("Failed to resume upload:",n),o.attempts++;const a=new File([],o.fileName,{type:o.fileType});Object.defineProperty(a,"size",{value:o.fileSize}),await Ie(o.fileHash,o.uploadInfo,a,o.offset)}}return e}catch(t){return console.error("Failed to resume interrupted uploads:",t),0}}async function Wt(){try{const t=await l("pb_pending_uploads")||[],e=Date.now()-3600*1e3,o=t.filter(n=>n.timestamp>e);o.length!==t.length&&(await d("pb_pending_uploads",o),console.log(`Cleaned up ${t.length-o.length} old pending uploads`))}catch(t){console.error("Failed to cleanup old pending uploads:",t)}}const S={isOnline:!0,isProcessing:!1,processingInterval:null},Gt=5e3,te=3;async function oe(t){try{const e={...t,id:zt(),timestamp:Date.now(),retryCount:0},o=await l("pb_pending_ops")||[];o.push(e),await d("pb_pending_ops",o),console.log("Operation queued:",e.type,e.id),S.isOnline&&await Be()}catch(e){console.error("Failed to enqueue operation:",e),await u(h.Unknown,{message:"Failed to queue operation",code:e instanceof Error?void 0:500})}}async function Be(){if(!S.isProcessing){S.isProcessing=!0;try{const t=await l("pb_pending_ops")||[];if(t.length===0)return;console.log(`Processing ${t.length} queued operations`);for(const e of t)try{await jt(e);const o=t.filter(n=>n.id!==e.id);await d("pb_pending_ops",o),await new Promise(n=>setTimeout(n,Gt))}catch(o){if(console.error("Failed to process operation:",e.id,o),e.retryCount++,e.retryCount>=te){console.log("Operation exceeded max retries, removing from queue:",e.id);const n=t.filter(a=>a.id!==e.id);await d("pb_pending_ops",n),await u(h.Unknown,{message:`Operation failed after ${te} retries: ${e.type}`,code:1002})}else{const n=t.map(a=>a.id===e.id?e:a);await d("pb_pending_ops",n)}}}catch(t){console.error("Failed to process queue:",t)}finally{S.isProcessing=!1}}}async function jt(t){switch(t.type){case"pushSend":await x(t.payload);break;case"smsSend":throw new Error("SMS sending not yet implemented");case"dismissal":throw new Error("Dismissal not yet implemented");default:throw new Error(`Unknown operation type: ${t.type}`)}}async function Rt(){return{pendingCount:(await l("pb_pending_ops")||[]).length,isOnline:S.isOnline,isProcessing:S.isProcessing}}async function Oe(){await d("pb_pending_ops",[]),console.log("Operation queue cleared")}function zt(){return`op_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}function qt(){S.processingInterval=setInterval(()=>{S.isProcessing||Be()},5e3),console.log("Operation queue system initialized")}const Vt=4*1024*1024,ne=12,xe="quota-check",j="pb_push_history",R="pb_transfers",Kt="pb_settings";async function Yt(){try{await chrome.alarms.create(xe,{periodInMinutes:ne*60}),console.log(`Quota monitor initialized with ${ne} hour interval`),chrome.alarms.onAlarm.addListener(Qt),await Le()}catch(t){console.error("Failed to initialize quota monitor:",t)}}function Qt(t){t.name===xe&&Le()}async function Le(){try{const t=await Ke();console.log(`Storage quota check: ${t} bytes used`),t>Vt&&(console.log("Storage quota exceeded, purging old data..."),await Jt(),await u(h.QuotaExceeded,{message:`Storage quota exceeded (${Math.round(t/1024/1024*100)/100} MB used)`,code:t}))}catch(t){console.error("Failed to check quota:",t)}}async function Jt(){const t=Date.now(),e=t-2160*60*60*1e3,o=t-720*60*60*1e3;let n=0;try{const a=await l(j)||[],r=a.filter(g=>g.timestamp>e);r.length<a.length&&(await d(j,r),n+=a.length-r.length,console.log(`Purged ${a.length-r.length} old push history entries`));const s=await l(R)||[],c=s.filter(g=>g.timestamp>o);c.length<s.length&&(await d(R,c),n+=s.length-c.length,console.log(`Purged ${s.length-c.length} old transfer entries`));const w=(await Xt()).filter(g=>g.startsWith("mirror_"));for(const g of w){const m=await l(g);m&&m.timestamp&&m.timestamp<o&&(await $(g),n++)}console.log(`Quota purge completed: ${n} items removed`)}catch(a){throw console.error("Failed to purge old data:",a),a}}async function Xt(){return[j,R,Kt,"pb_token","pb_device_iden","pb_last_modified"]}const ae=6,He="token-health-check";async function Zt(){try{await chrome.alarms.create(He,{periodInMinutes:ae*60}),console.log(`Token health monitor initialized with ${ae} hour interval`),chrome.alarms.onAlarm.addListener(eo),await We()}catch(t){console.error("Failed to initialize token health monitor:",t)}}function eo(t){t.name===He&&We()}async function We(){try{const t=await l("pb_token");if(!t)return console.log("No token found for health check"),{isValid:!1,lastChecked:Date.now(),error:"No token found"};console.log("Checking token health...");const e=await k.fetch("https://api.pushbullet.com/v2/users/me",{method:"GET",headers:{"Access-Token":t,"Content-Type":"application/json"}}),o={isValid:e.ok,lastChecked:Date.now()};if(e.ok){const n=await e.json();console.log("Token health check passed for user:",n.name),await d("pb_token_health",o)}else e.status===401?(console.error("Token health check failed: Token revoked"),o.error="Token revoked",await to()):(console.error("Token health check failed:",e.status,e.statusText),o.error=`API error: ${e.status}`);return await d("pb_token_health",o),o}catch(t){console.error("Token health check error:",t);const e={isValid:!1,lastChecked:Date.now(),error:t instanceof Error?t.message:"Unknown error"};return await d("pb_token_health",e),e}}async function to(){try{console.log("Handling token revocation..."),await u(h.TokenRevoked,{message:"Token has been revoked by Pushbullet",code:401}),await d("pb_token",""),await d("pb_device_iden",""),await chrome.action.setBadgeText({text:"AUTH"}),await chrome.action.setBadgeBackgroundColor({color:"#ef4444"}),console.log("Token revocation handled")}catch(t){console.error("Failed to handle token revocation:",t)}}console.log("Pushbridge background service worker started");const re="pb_last_popup_opened",oo=36e5;async function no(){try{console.log("[Background] Initializing SMS sync...");const t=await v();t?(console.log(`[Background] Default SMS device: ${t.nickname} (${t.iden})`),console.log(`[Background] SMS-capable device found: ${t.nickname}`),setInterval(async()=>{await H("periodic")},360*60*1e3),console.log("[Background] SMS sync initialized with 6-hour interval")):console.log("[Background] No SMS-capable device found, skipping SMS sync")}catch(t){console.error("[Background] Failed to initialize SMS sync:",t)}}chrome.runtime.onInstalled.addListener(async()=>{console.log("Pushbridge extension installed");try{await k.initialize(),await G.loadState(),console.log("[Background] Rate limit manager initialized"),U.initialize(),console.log("[Background] Token bucket initialized"),setInterval(()=>{const e=G.getDebugInfo(),o=U.getDetailedStatus();(e.isBackoffActive||e.backoffState.isActive)&&console.log("[Background] Backoff debug info:",e),o.bucket<=10&&console.log("[Background] Token bucket status:",o)},1e4),setInterval(async()=>{try{await y.validateState()||console.warn("[Background] Unified notification tracker state validation failed")}catch(e){console.error("[Background] Failed to validate unified notification tracker state:",e)}},300*1e3),await Ut(),await Yt(),await Zt(),qt(),await me(),await no(),console.log("[Background] SMS sync using simple system"),await P.loadContext(),console.log("[Background] Context manager initialized"),await y.initialize(),await Q(),await _e();const t=await Ht();t>0&&console.log(`Resumed ${t} interrupted uploads`),await Wt(),await Re()}catch(t){console.error("Failed to initialize background services:",t)}});chrome.runtime.onStartup.addListener(async()=>{console.log("Pushbridge service worker started");try{await _e(),await be()}catch(t){console.error("Failed to handle service worker startup:",t)}});chrome.notifications.onClicked.addListener(async t=>{try{const e=await l(`notification_${t}`);if(!e){console.log("No notification data found for:",t);return}e.url?await chrome.tabs.create({url:e.url}):await chrome.action.openPopup(),await d(`notification_${t}`,null)}catch(e){console.error("Failed to handle notification click:",e)}});chrome.notifications.onButtonClicked.addListener(async(t,e)=>{try{const o=await l(`notification_${t}`);if(!o)return;e===0&&(await Y(o.pushIden),await chrome.notifications.clear(t),await d(`notification_${t}`,null))}catch(o){console.error("Failed to handle notification button click:",o)}});chrome.notifications.onClicked.addListener(async t=>{if(t.includes("-")&&t.length===36)await ye(t);else try{const o=await l(`notification_${t}`);if(!o){console.log("No notification data found for:",t);return}o.url?await chrome.tabs.create({url:o.url}):await chrome.action.openPopup(),await d(`notification_${t}`,null)}catch(o){console.error("Failed to handle notification click:",o)}});chrome.notifications.onClosed.addListener(async(t,e)=>{e&&t.includes("-")&&t.length===36&&await ye(t)});chrome.runtime.onMessage.addListener((t,e,o)=>{switch(console.log("üì® [Background] Received message:",t),t.cmd){case"verifyToken":ao(t.token,o);break;case"getDevices":so(t.forceRefresh,o);break;case"clearDeviceCache":io(o);break;case"getContacts":co(t.forceRefresh,o);break;case"clearContactCache":lo(o);break;case"createPush":uo(t.payload,o);break;case"getPushHistory":ho(t.limit,t.modifiedAfter,t.cursor,o);break;case"getEnhancedPushHistory":fo(t.trigger,t.limit,t.modifiedAfter,t.cursor,o);break;case"dismissPush":po(t.pushIden,o);break;case"deletePush":go(t.pushIden,o);break;case"syncHistory":wo(o);break;case"getQueueStatus":yo(o);break;case"clearQueue":_o(o);break;case"getActiveMirrors":bo(o);break;case"POPUP_OPEN":Vo(o);break;case"CLEAR_SMS_NOTIFICATIONS":jo(o);break;case"UPLOAD_FILE":vo(t.payload,o);break;case"UPLOAD_FILE_FOR_SMS":So(t.payload,o);break;case"GET_TRANSFERS":To(o);break;case"DOWNLOAD_FILE":Eo(t.payload,o);break;case"GET_SMS_CONVERSATIONS":case"GET_SMS_CONVERSATIONS_FROM_API":Fo(o);break;case"GET_SMS_THREAD":case"GET_SMS_THREAD_FROM_API":case"LOAD_FULL_SMS_THREAD":se(t.conversationId,t.deviceIden,o);break;case"GET_SMS_THREAD_PAGED":se(t.conversationId,t.deviceIden,o);break;case"SEND_SMS":No(t.payload.conversationId,t.payload.message,o,t.payload.deviceIden,t.payload.attachments);break;case"MARK_CONVERSATION_READ":Co(t.conversationId,o);break;case"GET_DEFAULT_SMS_DEVICE":Po(o);break;case"GET_SMS_CAPABLE_DEVICES":Mo(o);break;case"SET_DEFAULT_SMS_DEVICE":Do(t.deviceIden,o);break;case"SYNC_SMS_HISTORY":Ao(t.deviceIden,o);break;case"RELOAD_SMS_THREAD":$o(t.deviceIden,t.threadId,o);break;case"GET_SMS_DEVICE_INFO":Io(o);break;case"GET_CHANNEL_SUBSCRIPTIONS":Uo(t.forceRefresh,o);break;case"SUBSCRIBE_TO_CHANNEL":Bo(t.channelTag,o);break;case"UNSUBSCRIBE_FROM_CHANNEL":Oo(t.subscriptionIden,o);break;case"GET_CHANNEL_INFO":xo(t.channelTag,o);break;case"GET_OWNED_CHANNELS":Ho(o);break;case"REFRESH_CHANNEL_DATA":Wo(o);break;case"GET_SUBSCRIPTION_POSTS":Go(o);break;case"clearAllData":Ro(o);break;case"testWebSocket":zo(o);break;case"getDebugLog":qo(o);break;case"getUnifiedTrackerState":Yo(o);break;case"DEBUG_SMS":case"DEBUG_STORAGE":o({success:!1,error:"Debug functions removed in simple system"});break;default:o({status:"unknown_command"})}return!0});async function ao(t,e){try{U.forceRefill(100),console.log("üîë [Background] Token bucket initialized for verification");const o=await k.fetch("https://api.pushbullet.com/v2/users/me",{method:"GET",headers:{"Access-Token":t,"Content-Type":"application/json"}});if(o.ok){const n=await o.json();console.log("Token verified successfully for user:",n.name),await d("pb_token",t),await d("pb_user_iden",n.iden);try{const a=await Ye();console.log("Chrome device registered:",a),console.log("üîÑ [Background] Fetching initial data after token verification..."),await ro(),e({ok:!0,user:n,deviceIden:a})}catch(a){console.error("Device registration failed:",a),e({ok:!0,user:n,deviceError:"Device registration failed"})}}else o.status===401?(console.error("Token verification failed: Unauthorized"),await u(h.TokenRevoked,{message:"Token is invalid or revoked",code:o.status}),e({ok:!1,error:"Invalid token. Please check your Pushbullet access token."})):(console.error("Token verification failed:",o.status,o.statusText),await u(h.Unknown,{message:"Token verification failed",code:o.status}),e({ok:!1,error:"Token verification failed. Please try again."}))}catch(o){console.error("Token verification error:",o),await u(h.Unknown,{message:"Token verification failed"}),e({ok:!1,error:"Failed to verify token. Please check your internet connection."})}}async function ro(){try{console.log("üîÑ [Background] Starting initial data fetch...");const t=[de(!0).then(()=>{console.log("‚úÖ [Background] Devices fetched successfully")}).catch(e=>{console.error("‚ùå [Background] Failed to fetch devices:",e)}),I(!0).then(()=>{console.log("‚úÖ [Background] Contacts fetched successfully")}).catch(e=>{console.error("‚ùå [Background] Failed to fetch contacts:",e)}),(async()=>{try{const{getSubscriptions:e}=await F(async()=>{const{getSubscriptions:o}=await Promise.resolve().then(()=>A);return{getSubscriptions:o}},void 0);await e(!0),console.log("‚úÖ [Background] Channel subscriptions fetched successfully")}catch(e){console.error("‚ùå [Background] Failed to fetch channel subscriptions:",e)}})(),(async()=>{try{const e=await K({type:"manual",timestamp:Date.now(),reason:"token_verification"},50,0,void 0);console.log(`‚úÖ [Background] Recent pushes fetched successfully (${e.pushes.length} pushes)`)}catch(e){console.error("‚ùå [Background] Failed to fetch recent pushes:",e)}})(),(async()=>{try{await Qe()?(await H("token_verification"),console.log("‚úÖ [Background] SMS sync triggered successfully")):console.log("‚ÑπÔ∏è [Background] No SMS-capable devices found, skipping SMS sync")}catch(e){console.error("‚ùå [Background] Failed to trigger SMS sync:",e)}})(),(async()=>{try{await Re(),console.log("‚úÖ [Background] Context menus created successfully")}catch(e){console.error("‚ùå [Background] Failed to create context menus:",e)}})(),(async()=>{try{await Q(),console.log("‚úÖ [Background] WebSocket connection ensured")}catch(e){console.error("‚ùå [Background] Failed to ensure WebSocket connection:",e)}})()];await Promise.allSettled(t),console.log("üéâ [Background] Initial data fetch completed")}catch(t){console.error("‚ùå [Background] Error during initial data fetch:",t)}}async function so(t,e){try{const o=await de(t);e({ok:!0,devices:o})}catch(o){console.error("Failed to get devices:",o),e({ok:!1,error:"Failed to fetch devices"})}}async function io(t){try{await Je(),t({ok:!0})}catch(e){console.error("Failed to clear device cache:",e),t({ok:!1,error:"Failed to clear cache"})}}async function co(t,e){try{const o=await I(t);e({ok:!0,contacts:o})}catch(o){console.error("Failed to get contacts:",o),e({ok:!1,error:"Failed to fetch contacts"})}}async function lo(t){try{await yt(),t({ok:!0})}catch(e){console.error("Failed to clear contact cache:",e),t({ok:!1,error:"Failed to clear contact cache"})}}async function uo(t,e){try{if(!Me()){await oe({type:"pushSend",payload:t}),e({ok:!0,queued:!0,message:"Push queued for later delivery"});return}const o=await x(t);try{chrome.runtime.sendMessage({cmd:"pushCreated",source:"background",push:o})}catch{}e({ok:!0,push:o})}catch(o){if(console.error("Failed to create push:",o),o instanceof Error&&o.message.includes("network")){await oe({type:"pushSend",payload:t}),e({ok:!0,queued:!0,message:"Push queued due to network error"});return}e({ok:!1,error:o instanceof Error?o.message:"Failed to create push"})}}async function ho(t,e,o,n){try{const a=await L(t,e,o);if(console.log("üìã [handleGetPushHistory] Response:",{ok:!0,history:a.pushes.length,modifiedAfter:e,cursor:o}),a.pushes.length>0){const r=Math.max(...a.pushes.map(s=>s.modified));await d("pb_last_modified",r)}n({ok:!0,history:a})}catch(a){console.error("Failed to get push history:",a),n({ok:!1,error:"Failed to fetch push history"})}}async function fo(t,e,o,n,a){try{console.log("üîÑ [Background] Getting enhanced push history with trigger:",t.type);const r=await K(t,e,o,n);if(console.log("üìã [handleGetEnhancedPushHistory] Response:",{ok:!0,history:r.pushes.length,modifiedAfter:o,cursor:n,trigger:t.type}),r.pushes.length>0){const s=Math.max(...r.pushes.map(c=>c.modified));if(await d("pb_last_modified",s),console.log("üîç [Background] Enhanced push details:",r.pushes.map(c=>({iden:c.iden,type:c.type,title:c.title,receiver_iden:c.receiver_iden,target_device_iden:c.target_device_iden,dismissed:c.dismissed,created:c.created,modified:c.modified,channel_iden:c.channel_iden}))),t.type==="unknown_source"){console.log("üîî [Background] Processing pushes for notifications (WebSocket tickle)");let c=0;for(const i of r.pushes)!i.dismissed&&(i.receiver_iden||i.target_device_iden||i.type==="mirror"||i.type==="file"||i.channel_iden)?await y.shouldShowNotification({id:i.iden,type:"push",created:i.created,metadata:{pushIden:i.iden}})?(console.log(`üîî [Background] Processing new push: ${i.iden} (type: ${i.type})`),(await Ge(i)||i.type==="file"||i.channel_iden)&&(console.log("üîî [Background] Updating badge for new push notification"),await _.addPushNotifications(1),await y.markAsProcessed("push",i.iden,new Date(E(i.created)*1e3).getTime()),c++)):console.log(`‚è≠Ô∏è [Background] Skipping already processed push: ${i.iden}`):console.log(`‚è≠Ô∏è [Background] Skipping push: ${i.iden} (dismissed: ${i.dismissed})`);console.log(`üìä [Background] New push processing summary: ${c} new notifications`)}else console.log(`‚è≠Ô∏è [Background] Skipping notification processing for trigger: ${t.type} (popup open)`)}else console.log("üîÑ [Background] No new pushes found in enhanced history");a({ok:!0,history:r})}catch(r){console.error("Failed to get enhanced push history:",r),a({ok:!1,error:"Failed to fetch enhanced push history"})}}async function po(t,e){try{await Y(t),console.log("üîî [Background] Push dismissed, updating badge"),await _.addPushNotifications(-1),e({ok:!0})}catch(o){console.error("Failed to dismiss push:",o),e({ok:!1,error:"Failed to dismiss push"})}}async function go(t,e){try{await Se(t),console.log("üîî [Background] Push deleted, updating badge"),await _.addPushNotifications(-1),e({ok:!0})}catch(o){console.error("Failed to delete push:",o),e({ok:!1,error:"Failed to delete push"})}}async function wo(t){try{console.log("üîÑ [Background] Syncing push history");const e=await l("pb_last_modified"),o=await chrome.storage.local.get("pb_recent_pushes_state"),n=o.pb_recent_pushes_state?.cursor,a=await L(100,e,n);if(a.pushes.length>0){console.log(`üîÑ [Background] Found ${a.pushes.length} pushes from API`),console.log("üîç [Background] Push details:",a.pushes.map(i=>({iden:i.iden,type:i.type,title:i.title,receiver_iden:i.receiver_iden,target_device_iden:i.target_device_iden,dismissed:i.dismissed,created:i.created,modified:i.modified})));const r=Math.max(...a.pushes.map(i=>i.modified));if(await d("pb_last_modified",r),a.cursor){const i=o.pb_recent_pushes_state||{};await chrome.storage.local.set({pb_recent_pushes_state:{...i,cursor:a.cursor,hasMore:!!a.cursor}})}let s=0,c=0;for(const i of a.pushes)!i.dismissed&&(i.receiver_iden||i.target_device_iden||i.type==="mirror"||i.type==="file"||i.channel_iden)?await y.shouldShowNotification({id:i.iden,type:"push",created:i.created,metadata:{pushIden:i.iden}})?(console.log(`üîî [Background] Processing push: ${i.iden} (type: ${i.type})`),(await Ge(i)||i.type==="file"||i.channel_iden)&&(console.log("üîî [Background] Updating badge for new push notification"),await _.addPushNotifications(1),await y.markAsProcessed("push",i.iden,new Date(E(i.created)*1e3).getTime())),s++):(console.log(`‚è≠Ô∏è [Background] Skipping already processed push: ${i.iden}`),c++):(console.log(`‚è≠Ô∏è [Background] Skipping push: ${i.iden} (dismissed: ${i.dismissed}, receiver_iden: ${i.receiver_iden}, target_device_iden: ${i.target_device_iden})`),c++);console.log(`üìä [Background] Push processing summary: ${s} processed, ${c} skipped`)}else console.log("üîÑ [Background] No new pushes found");try{chrome.runtime.sendMessage({cmd:"syncHistory",source:"background",newPushes:a.pushes.length})}catch{}t({ok:!0,newPushes:a.pushes.length})}catch(e){console.error("Failed to sync history:",e),t({ok:!1,error:"Failed to sync history"})}}async function Ge(t){try{console.log("üîî [Background] Showing push notification:",{type:t.type,title:t.title,channel_tag:t.channel_tag});const e=await l("pb_device_iden");if(t.receiver_iden!==e)return console.log("üîî [Background] Push not for this device, skipping notification"),!1;let o,n,a;if(t.type==="file"){o="File received",n=t.file_name||"New file",a="/icons/48.png";const s={id:t.iden,type:"received",fileName:t.file_name,fileSize:0,fileType:t.file_type||"application/octet-stream",timestamp:Date.now(),status:"completed",sourceDevice:t.source_device_iden};await je(s),await mo(t)}else t.channel_tag?(o=`${t.channel_tag}: ${t.title??"New post"}`,n=t.body??"",a="/icons/48.png",await ko(t)):(o=t.title||(t.type==="link"?t.url:"New push"),n=t.body||"",a="/icons/48.png");const r=`push_${t.iden}`;return await chrome.notifications.create(r,{type:"basic",iconUrl:a,title:o,message:n,requireInteraction:!0}),await d(`notification_${r}`,{pushIden:t.iden,url:t.url,type:t.type,channelTag:t.channel_tag}),console.log("üîî [Background] Updating badge for new push notification"),await _.addPushNotifications(1),console.log("üîî [Background] Push notification created:",r),!0}catch(e){return console.error("Failed to show push notification:",e),!1}}async function mo(t){try{await chrome.downloads.download({url:t.file_url,filename:t.file_name}),await chrome.notifications.create({type:"basic",iconUrl:"/icons/48.png",title:"File Downloaded",message:`File "${t.file_name}" has been downloaded`})}catch(e){console.error("Failed to download received file:",e),await chrome.notifications.create({type:"basic",iconUrl:"/icons/48.png",title:"File Available",message:`Click to view file "${t.file_name}"`})}}async function ko(t){try{const e=await l("pb_recent_pushes")||[],o={...t,isChannelPush:!0,channelTag:t.channel_tag};e.unshift(o),e.length>500&&e.splice(500),await d("pb_recent_pushes",e)}catch(e){console.error("Failed to add channel push to recent list:",e)}}async function yo(t){try{const e=await Rt(),o=De();t({ok:!0,queue:e,connection:o})}catch(e){console.error("Failed to get queue status:",e),t({ok:!1,error:"Failed to get queue status"})}}async function _o(t){try{await Oe(),t({ok:!0})}catch(e){console.error("Failed to clear queue:",e),t({ok:!1,error:"Failed to clear queue"})}}async function bo(t){try{const e=await gt();t({success:!0,mirrors:e})}catch(e){console.error("Failed to get active mirrors:",e),t({success:!1,error:"Failed to fetch notifications"})}}async function je(t){try{const e=await l("pb_transfers")||[];e.unshift(t),e.length>50&&e.splice(50),await d("pb_transfers",e)}catch(e){console.error("Failed to add transfer record:",e)}}async function vo(t,e){try{const{fileData:o,targetDeviceIden:n,email:a,title:r,body:s,channel_tag:c}=t,i=new File([new Uint8Array(o.buffer)],o.name,{type:o.type,lastModified:o.lastModified}),w=await V(i),m=await Ue(w,i,f=>{chrome.runtime.sendMessage({type:"UPLOAD_PROGRESS",payload:{progress:f.percentage}}).catch(()=>{})});if(m.success){const f=await ve(w.fileUrl,i.name,i.type||"application/octet-stream",n,r,s,c,a),C={id:f.iden,type:"sent",fileName:i.name,fileSize:i.size,fileType:i.type||"application/octet-stream",timestamp:Date.now(),status:"completed",targetDevice:n};await je(C);try{chrome.runtime.sendMessage({cmd:"pushCreated",source:"background",push:f})}catch{}await chrome.notifications.create({type:"basic",iconUrl:"/icons/48.png",title:"File Sent",message:`File "${i.name}" sent successfully`}),e({success:!0,filePush:f})}else e({success:!1,error:m.error})}catch(o){console.error("Failed to upload file:",o),e({success:!1,error:o instanceof Error?o.message:"Upload failed"})}}async function So(t,e){try{const{fileData:o}=t,n=new File([new Uint8Array(o.buffer)],o.name,{type:o.type,lastModified:o.lastModified}),a=await V(n),s=await Ue(a,n,c=>{chrome.runtime.sendMessage({type:"UPLOAD_PROGRESS",payload:{progress:c.percentage}}).catch(()=>{})});s.success?e({success:!0,fileUrl:a.fileUrl}):e({success:!1,error:s.error})}catch(o){console.error("Failed to upload file for SMS:",o),e({success:!1,error:o instanceof Error?o.message:"Upload failed"})}}async function To(t){try{const e=await l("pb_transfers")||[];t({success:!0,transfers:e})}catch(e){console.error("Failed to get transfers:",e),t({success:!1,error:"Failed to load transfers"})}}async function Eo(t,e){try{if(!(await l("pb_transfers")||[]).find(a=>a.id===t.transferId)){e({success:!1,error:"Transfer not found"});return}await chrome.notifications.create({type:"basic",iconUrl:"/icons/48.png",title:"Download Not Available",message:"File download will be implemented in a future update"}),e({success:!0})}catch(o){console.error("Failed to download file:",o),e({success:!1,error:"Download failed"})}}async function Re(){chrome.contextMenus.removeAll(async()=>{try{const t=await ce(),e=await I(),o=[{id:"push-page",title:"Push this page",contexts:["page"]},{id:"push-link",title:"Push this link",contexts:["link"]},{id:"push-image",title:"Push this image",contexts:["image"]},{id:"push-selection",title:"Push selected text",contexts:["selection"]}];for(const n of o){if(chrome.contextMenus.create({id:n.id,title:n.title,contexts:n.contexts}),t.length>0){chrome.contextMenus.create({id:`${n.id}-devices`,title:"Devices",parentId:n.id,contexts:n.contexts});for(const a of t)chrome.contextMenus.create({id:`${n.id}-device-${a.iden}`,title:`üì± ${a.nickname}`,parentId:`${n.id}-devices`,contexts:n.contexts})}if(e.length>0){chrome.contextMenus.create({id:`${n.id}-contacts`,title:"Contacts",parentId:n.id,contexts:n.contexts});for(const a of e)chrome.contextMenus.create({id:`${n.id}-contact-${a.iden}`,title:`üë§ ${a.name}`,parentId:`${n.id}-contacts`,contexts:n.contexts})}chrome.contextMenus.create({id:`${n.id}-all`,title:"üì§ All Devices",parentId:n.id,contexts:n.contexts})}}catch(t){console.error("Failed to create context menus:",t),chrome.contextMenus.create({id:"push-page-all",title:"Push this page",contexts:["page"]})}})}chrome.contextMenus.onClicked.addListener(async(t,e)=>{if(console.log("üîÑ [Background] Context menu clicked:",t,e),!!e){console.log("üîÑ [Background] Context menu processing:",t,e);try{const o=t.menuItemId;let n,a;if(o.startsWith("push-page"))a="push-page",n={type:"link",url:e.url,title:e.title,body:`Page shared from ${new URL(e.url).hostname}`};else if(o.startsWith("push-link"))a="push-link",n={type:"link",url:t.linkUrl,title:t.linkText||t.linkUrl,body:`Link shared from ${new URL(e.url).hostname}`};else if(o.startsWith("push-image"))a="push-image",n={type:"link",url:t.srcUrl,title:t.altText||"Image",body:`Image shared from ${new URL(e.url).hostname}`};else if(o.startsWith("push-selection"))a="push-selection",n={type:"note",body:t.selectionText,title:`Text from ${new URL(e.url).hostname}`};else{console.warn("üîÑ [Background] Unknown context menu ID:",o);return}if(o.endsWith("-all"))console.log("üîÑ [Background] Sending to all devices");else if(o.includes("-device-")){const r=o.match(new RegExp(`${a}-device-(.+)`));if(r&&r[1]){const s=r[1];n.targetDeviceIden=s,console.log("üîÑ [Background] Sending to device:",s)}else{console.error("üîÑ [Background] Failed to extract device ID from menu ID:",o);return}}else if(o.includes("-contact-")){const r=o.match(new RegExp(`${a}-contact-(.+)`));if(r&&r[1]){const s=r[1],c=await _t(s);if(c)n.email=c.email,console.log("üîÑ [Background] Sending to contact:",c.email);else{console.error("üîÑ [Background] Contact not found for ID:",s);return}}else{console.error("üîÑ [Background] Failed to extract contact ID from menu ID:",o);return}}else console.log("üîÑ [Background] Parent menu clicked, sending to all devices");await x(n),await chrome.notifications.create({type:"basic",iconUrl:"/icons/48.png",title:"Push Sent",message:"Your push has been sent successfully!"})}catch(o){console.error("‚ùå [Background] Failed to handle context menu click:",o),await chrome.notifications.create({type:"basic",iconUrl:"/icons/48.png",title:"Push Failed",message:"Failed to send push. Please try again."})}}});async function Fo(t){try{console.log("üì± [Background] Getting SMS conversations (simple) - returning cached data");const e=await v();if(!e){t({success:!1,error:"No SMS device available"});return}const o=await Xe(e.iden);t({success:!0,conversations:o.threads,lastSync:o.lastSync})}catch(e){console.error("[Background] Failed to get SMS conversations:",e),t({success:!1,error:e instanceof Error?e.message:"Failed to get conversations"})}}async function se(t,e,o){try{console.log(`üì® [Background] Getting SMS thread: ${t} (simple)`);let n=e;if(!n){const r=await v();if(!r){o({success:!1,error:"No SMS device available"});return}n=r.iden}console.log("üì® [Background] Loading thread from cache (no sync needed)");const a=await Ze(n,t);o(a?{success:!0,thread:a}:{success:!1,error:"Thread not found"})}catch(n){console.error("[Background] Failed to get SMS thread:",n),o({success:!1,error:n instanceof Error?n.message:"Failed to get thread"})}}async function H(t="manual"){try{console.log(`üîÑ [Background] Triggering SMS sync (${t})`);const e=await v();if(!e){console.warn("‚ö†Ô∏è [Background] No SMS device for sync");return}await le(e.iden)}catch(e){console.error(`‚ùå [Background] SMS sync failed (${t}):`,e)}}async function Co(t,e){try{console.log(`[Background] Marking conversation ${t} as read`),e({success:!0})}catch(o){console.error("Failed to mark conversation as read:",o),e({success:!1,error:"Failed to mark as read"})}}async function Po(t){try{console.log("[Background] Getting default SMS device...");const e=await v();e?(console.log("[Background] Default SMS device found:",{iden:e.iden,nickname:e.nickname,has_sms:e.has_sms}),t({success:!0,device:{iden:e.iden,nickname:e.nickname,has_sms:e.has_sms}})):(console.warn("[Background] No SMS-capable device found"),t({success:!1,error:"No SMS-capable device found"}))}catch(e){console.error("[Background] Failed to get default SMS device:",e),t({success:!1,error:"Failed to get SMS device"})}}async function Mo(t){try{const e=await et();t({success:!0,devices:e})}catch(e){console.error("Failed to get SMS-capable devices:",e),t({success:!1,error:"Failed to get devices"})}}async function Do(t,e){try{const o=await tt(t);e({success:o})}catch(o){console.error("Failed to set default SMS device:",o),e({success:!1,error:"Failed to set device"})}}async function Ao(t,e){try{await H("manual"),e({success:!0})}catch(o){console.error("Failed to sync SMS history:",o),e({success:!1,error:"Failed to sync history"})}}async function $o(t,e,o){try{if(console.log(`üì± [Background] Reloading SMS thread: ${e} for device: ${t}`),!t){const a=await v();if(!a){o({success:!1,error:"No SMS device available"});return}t=a.iden}if(!e){o({success:!1,error:"Thread ID is required"});return}const n=await ot(t,e);o(n?{success:!0,thread:n}:{success:!1,error:"Failed to reload thread - device may be offline or thread not found"})}catch(n){console.error("[Background] Failed to reload SMS thread:",n),o({success:!1,error:n instanceof Error?n.message:"Failed to reload SMS thread"})}}async function Io(t){try{const e=await v();t(e?{success:!0,device:{iden:e.iden,nickname:e.nickname,model:e.model,type:e.type}}:{success:!1,error:"No SMS device found"})}catch(e){console.error("Failed to get SMS device info:",e),t({success:!1,error:"Failed to get device info"})}}async function No(t,e,o,n,a){try{console.log("üì± [Background] Sending SMS:",{conversationId:t,messageLength:e.length,deviceIden:n,hasAttachments:!!a});let r=n;if(!r){const s=await v();if(!s){o({success:!1,error:"No SMS device available"});return}r=s.iden}if(!e.trim()&&(!a||a.length===0)){o({success:!1,error:"Message cannot be empty"});return}await nt(r,t,e,a),console.log("üì± [Background] SMS sent successfully to:",t),o({success:!0})}catch(r){console.error("üì± [Background] Failed to send SMS:",r),r instanceof Error?r.message.includes("Token is invalid or revoked")?o({success:!1,error:"Token is invalid or revoked"}):r.message.includes("Message cannot be empty")?o({success:!1,error:"Message cannot be empty"}):o({success:!1,error:r.message}):o({success:!1,error:"Failed to send SMS"})}}async function Uo(t,e){try{const{getSubscriptions:o}=await F(async()=>{const{getSubscriptions:a}=await Promise.resolve().then(()=>A);return{getSubscriptions:a}},void 0),n=await o(t);e({success:!0,subscriptions:n})}catch(o){console.error("Failed to get channel subscriptions:",o),e({success:!1,error:"Failed to fetch channel subscriptions"})}}async function Bo(t,e){try{const o=await l("pb_token");if(!o){e({success:!1,error:"No access token available"});return}const n=await k.fetch("https://api.pushbullet.com/v2/subscriptions",{method:"POST",headers:{"Access-Token":o,"Content-Type":"application/json"},body:JSON.stringify({channel_tag:t})});if(!n.ok){if(n.status===401){await u(h.TokenRevoked,{message:"Token revoked during channel subscription",code:n.status}),e({success:!1,error:"Token is invalid or revoked"});return}throw new Error(`Failed to subscribe: ${n.status} ${n.statusText}`)}const a=await n.json(),{getSubscriptions:r}=await F(async()=>{const{getSubscriptions:s}=await Promise.resolve().then(()=>A);return{getSubscriptions:s}},void 0);await r(!0),e({success:!0,subscription:a})}catch(o){console.error("Failed to subscribe to channel:",o),e({success:!1,error:"Failed to subscribe to channel"})}}async function Oo(t,e){try{const o=await l("pb_token");if(!o){e({success:!1,error:"No access token available"});return}const{getSubscriptions:n}=await F(async()=>{const{getSubscriptions:i}=await Promise.resolve().then(()=>A);return{getSubscriptions:i}},void 0),r=(await n(!1)).find(i=>i.iden===t),s=r?.channel?.iden,c=await k.fetch(`https://api.pushbullet.com/v2/subscriptions/${t}`,{method:"DELETE",headers:{"Access-Token":o,"Content-Type":"application/json"}});if(!c.ok){if(c.status===404){const{clearSubscriptionsCache:i}=await F(async()=>{const{clearSubscriptionsCache:w}=await Promise.resolve().then(()=>A);return{clearSubscriptionsCache:w}},void 0);await i(),await ie(s,r),e({success:!0,message:"Already unsubscribed"});return}if(c.status===401){await u(h.TokenRevoked,{message:"Token revoked during channel unsubscription",code:c.status}),e({success:!1,error:"Token is invalid or revoked"});return}throw new Error(`Failed to unsubscribe: ${c.status} ${c.statusText}`)}s&&await Lo(s),await ie(s,r),await n(!0),e({success:!0})}catch(o){console.error("Failed to unsubscribe from channel:",o),e({success:!1,error:"Failed to unsubscribe from channel"})}}async function xo(t,e){try{const o=await k.fetch(`https://api.pushbullet.com/v2/channel-info?tag=${encodeURIComponent(t)}`,{method:"GET",headers:{"Content-Type":"application/json"}});if(!o.ok){if(o.status===404){e({success:!1,error:"Channel not found"});return}throw new Error(`Failed to get channel info: ${o.status} ${o.statusText}`)}const n=await o.json();e({success:!0,channelInfo:n})}catch(o){console.error("Failed to get channel info:",o),e({success:!1,error:"Failed to get channel information"})}}async function Lo(t){try{const e=await chrome.storage.local.get("pb_recent_pushes_state");if(!e.pb_recent_pushes_state)return;const o=e.pb_recent_pushes_state,n=o.pushes||[],a=n.filter(s=>s.channel_iden!==t),r={...o,pushes:a};await chrome.storage.local.set({pb_recent_pushes_state:r}),console.log(`Cleaned up ${n.length-a.length} pushes for channel ${t}`)}catch(e){console.error("Failed to cleanup channel pushes:",e)}}async function ie(t,e){try{if(!t&&!e)return;const{ContextManager:o}=await F(async()=>{const{ContextManager:r}=await Promise.resolve().then(()=>bt);return{ContextManager:r}},void 0),n=o.getInstance();t&&await n.removeChannelFromContext(t);const a=["pb_channel_subs","pb_owned_channels"];for(const r of a)try{const s=await chrome.storage.local.get(r);if(s[r]){if(r==="pb_channel_subs"&&s[r].subscriptions){const c=s[r].subscriptions.filter(i=>i.channel&&i.channel.iden!==t);await chrome.storage.local.set({[r]:{...s[r],subscriptions:c}})}if(r==="pb_owned_channels"&&s[r].channels){const c=s[r].channels.filter(i=>i.iden!==t);await chrome.storage.local.set({[r]:{...s[r],channels:c}})}}}catch(s){console.error(`Failed to cleanup ${r}:`,s)}console.log(`Cleaned up channel ${t} from local storage`)}catch(o){console.error("Failed to cleanup channel from storage:",o)}}async function Ho(t){try{const e=await pe();t({success:!0,ownedChannels:e})}catch(e){console.error("Failed to get owned channels:",e),t({success:!1,error:e instanceof Error?e.message:"Failed to get owned channels"})}}async function Wo(t){try{await q(),t({success:!0})}catch(e){console.error("Failed to refresh channel data:",e),t({success:!1,error:e instanceof Error?e.message:"Unknown error"})}}async function Go(t){try{const e=await ke();t({success:!0,posts:e})}catch(e){console.error("Failed to get subscription posts:",e),t({success:!1,error:e instanceof Error?e.message:"Unknown error"})}}async function jo(t){try{console.log("üí¨ [Background] Clearing SMS notifications from badge"),await _.clearSmsNotifications(),console.log("üí¨ [Background] SMS notifications cleared from badge"),t({ok:!0})}catch(e){console.error("Failed to clear SMS notifications:",e),t({ok:!1,error:"Failed to clear SMS notifications"})}}async function Ro(t){try{console.log("üßπ [Background] Starting complete data clear..."),await chrome.storage.local.clear(),console.log("üßπ [Background] All chrome.storage.local data cleared"),await chrome.storage.session.clear(),console.log("üßπ [Background] All chrome.storage.session data cleared");try{U.reset(),console.log("üßπ [Background] Token bucket reset")}catch(e){console.warn("üßπ [Background] Failed to reset token bucket:",e)}try{await G.clearState(),console.log("üßπ [Background] Rate limit manager reset")}catch(e){console.warn("üßπ [Background] Failed to reset rate limit manager:",e)}try{await y.clearAllNotifications(),console.log("üßπ [Background] Notification tracker reset")}catch(e){console.warn("üßπ [Background] Failed to reset notification tracker:",e)}try{await Oe(),console.log("üßπ [Background] Operation queue cleared")}catch(e){console.warn("üßπ [Background] Failed to clear operation queue:",e)}console.log("üéâ [Background] All extension data cleared successfully"),t({success:!0,message:"All extension data has been cleared"})}catch(e){console.error("‚ùå [Background] Failed to clear all data:",e),t({success:!1,error:"Failed to clear all data",details:e instanceof Error?e.message:"Unknown error"})}}async function zo(t){try{const e=await Ko();t({ok:!0,lastHeartbeat:e})}catch(e){console.error("WebSocket test failed:",e),t({ok:!1,error:"WebSocket test failed"})}}async function qo(t){try{const e=await Qo();t({ok:!0,log:e})}catch(e){console.error("Failed to collect debug log:",e),t({ok:!1,error:"Failed to collect debug log"})}}async function Vo(t){try{const e=Date.now();console.log("ü™ü [Background] Popup opened, clearing all notifications");const o=await l(re),n=!o||e-o>oo;console.log(`ü™ü [PopupTime] Last popup opened: ${o?new Date(E(o)).toISOString():"never"}, current: ${new Date(E(e)).toISOString()}, should sync SMS: ${n}`),await d(re,e),await y.markAsSeen(),await _.clearPushNotifications(),n?(console.log("ü™ü [PopupTime] Triggering SMS sync (>1 hour since last popup open)"),H("popup_open")):console.log("ü™ü [PopupTime] Skipping SMS sync (<1 hour since last popup open)"),await _.refreshBadge(),console.log("ü™ü [Background] All notifications marked as seen, badge refreshed"),t({ok:!0})}catch(e){console.error("Failed to handle popup open:",e),t({ok:!1,error:"Failed to clear notifications"})}}async function Ko(){return new Date().toISOString()}async function Yo(t){try{const e=y.getState();t({ok:!0,state:e})}catch(e){console.error("Failed to get unified tracker state:",e),t({ok:!1,error:"Failed to get tracker state"})}}async function Qo(){const t=[];t.push("=== Pushbridge Debug Log ==="),t.push(`Generated: ${new Date().toISOString()}`),t.push("Extension Version: 1.0.0"),t.push("Chrome Version: Chrome Extension"),t.push("");try{const e=await chrome.storage.local.get(null);t.push("=== Storage Info ==="),t.push(`Token exists: ${!!e.pb_token}`),t.push(`Device IDEN: ${e.pb_device_iden||"Not set"}`),t.push(`Settings: ${JSON.stringify(e.pb_settings||{},null,2)}`),t.push("")}catch(e){t.push(`Failed to read storage: ${e}`)}try{const e=y.getState();t.push("=== Unified Tracker State ==="),t.push(`Last Seen: ${new Date(E(e.timestamps.lastSeenTimestamp)).toISOString()}`),t.push(`Last Updated: ${new Date(E(e.timestamps.lastUpdated)).toISOString()}`),t.push(`Cache Entries: ${Object.values(e.cache).reduce((o,n)=>o+n.length,0)}`),t.push("")}catch(e){t.push(`Failed to get tracker state: ${e}`)}return t.push("=== Recent Activity ==="),t.push("WebSocket status: Connected"),t.push(`Last push received: ${new Date().toISOString()}`),t.push("Queue status: Active"),t.join(`
`)}
